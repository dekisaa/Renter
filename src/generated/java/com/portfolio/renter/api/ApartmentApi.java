/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.portfolio.renter.api;

import com.portfolio.renter.api.model.ApartmentDTO;
import io.swagger.annotations.*;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
@Api(value = "Apartment", description = "the Apartment API")
public interface ApartmentApi {

  /**
   * POST /apartments : Add a new apartment
   *
   * @param apartmentDTO (required)
   * @return Apartment successfully created (status code 201) or Invalid input (status code 405)
   */
  @ApiOperation(
      value = "Add a new apartment",
      nickname = "addApartment",
      notes = "",
      response = ApartmentDTO.class,
      tags = {
        "apartment",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Apartment successfully created",
            response = ApartmentDTO.class),
        @ApiResponse(code = 405, message = "Invalid input")
      })
  @RequestMapping(
      value = "/apartments",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.POST)
  ResponseEntity<ApartmentDTO> addApartment(
      @ApiParam(value = "", required = true) @Valid @RequestBody ApartmentDTO apartmentDTO);

  /**
   * PUT /apartments/{id} : Edit apartment
   *
   * @param id Id of apartment (required)
   * @param apartmentDTO (required)
   * @return Apartment successfully edited (status code 201) or Apartment not found (status code
   *     404) or Invalid input (status code 405)
   */
  @ApiOperation(
      value = "Edit apartment",
      nickname = "editApartment",
      notes = "",
      response = ApartmentDTO.class,
      tags = {
        "apartment",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Apartment successfully edited",
            response = ApartmentDTO.class),
        @ApiResponse(code = 404, message = "Apartment not found"),
        @ApiResponse(code = 405, message = "Invalid input")
      })
  @RequestMapping(
      value = "/apartments/{id}",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.PUT)
  ResponseEntity<ApartmentDTO> editApartment(
      @Min(0) @ApiParam(value = "Id of apartment", required = true) @PathVariable("id") Integer id,
      @ApiParam(value = "", required = true) @Valid @RequestBody ApartmentDTO apartmentDTO);
}
