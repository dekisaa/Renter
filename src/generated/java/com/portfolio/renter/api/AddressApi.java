/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.portfolio.renter.api;

import com.portfolio.renter.api.model.AddressDTO;
import io.swagger.annotations.*;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
@Api(value = "Address", description = "the Address API")
public interface AddressApi {

  /**
   * POST /addresses : Add a new addresses
   *
   * @param addressDTO (required)
   * @return Address successfully created (status code 201) or Invalid input (status code 405)
   */
  @ApiOperation(
      value = "Add a new addresses",
      nickname = "addAddress",
      notes = "",
      response = AddressDTO.class,
      tags = {
        "address",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Address successfully created",
            response = AddressDTO.class),
        @ApiResponse(code = 405, message = "Invalid input")
      })
  @RequestMapping(
      value = "/addresses",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.POST)
  ResponseEntity<AddressDTO> addAddress(
      @ApiParam(value = "", required = true) @Valid @RequestBody AddressDTO addressDTO);

  /**
   * DELETE /addresses/{id} : Delete one Address by id.
   *
   * @param id Id of address. (required)
   * @return deleted Address (status code 200) or Address not found (status code 404)
   */
  @ApiOperation(
      value = "Delete one Address by id.",
      nickname = "deleteAddress",
      notes = "",
      response = AddressDTO.class,
      tags = {
        "address",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "deleted Address", response = AddressDTO.class),
        @ApiResponse(code = 404, message = "Address not found")
      })
  @RequestMapping(
      value = "/addresses/{id}",
      produces = {"application/json"},
      method = RequestMethod.DELETE)
  ResponseEntity<AddressDTO> deleteAddress(
      @Min(0) @ApiParam(value = "Id of address.", required = true) @PathVariable("id") Integer id);

  /**
   * PUT /addresses : Edit address of the location
   *
   * @param addressDTO (required)
   * @return Address successfully edited (status code 201) or Address not found (status code 404) or
   *     Invalid input (status code 405)
   */
  @ApiOperation(
      value = "Edit address of the location",
      nickname = "editAddress",
      notes = "",
      response = AddressDTO.class,
      tags = {
        "address",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Address successfully edited",
            response = AddressDTO.class),
        @ApiResponse(code = 404, message = "Address not found"),
        @ApiResponse(code = 405, message = "Invalid input")
      })
  @RequestMapping(
      value = "/addresses",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.PUT)
  ResponseEntity<AddressDTO> editAddress(
      @ApiParam(value = "", required = true) @Valid @RequestBody AddressDTO addressDTO);

  /**
   * GET /addresses/{id} : Get one Address by id.
   *
   * @param id Id of address. (required)
   * @return requested Address (status code 200) or Address not found (status code 404)
   */
  @ApiOperation(
      value = "Get one Address by id.",
      nickname = "getAddress",
      notes = "",
      response = AddressDTO.class,
      tags = {
        "address",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "requested Address", response = AddressDTO.class),
        @ApiResponse(code = 404, message = "Address not found")
      })
  @RequestMapping(
      value = "/addresses/{id}",
      produces = {"application/json"},
      method = RequestMethod.GET)
  ResponseEntity<AddressDTO> getAddress(
      @Min(0) @ApiParam(value = "Id of address.", required = true) @PathVariable("id") Integer id);
}
