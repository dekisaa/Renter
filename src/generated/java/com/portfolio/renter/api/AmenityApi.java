/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.portfolio.renter.api;

import com.portfolio.renter.api.model.AddressDTO;
import com.portfolio.renter.api.model.AmenityDTO;
import io.swagger.annotations.*;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
@Api(value = "Amenity", description = "the Amenity API")
public interface AmenityApi {

  /**
   * POST /amenities : Add a new amenity
   *
   * @param addressDTO (required)
   * @return Address successfully created (status code 201) or Invalid input (status code 405)
   */
  @ApiOperation(
      value = "Add a new amenity",
      nickname = "addAmenity",
      notes = "",
      response = AddressDTO.class,
      tags = {
        "amenity",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Address successfully created",
            response = AddressDTO.class),
        @ApiResponse(code = 405, message = "Invalid input")
      })
  @RequestMapping(
      value = "/amenities",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.POST)
  ResponseEntity<AddressDTO> addAmenity(
      @ApiParam(value = "", required = true) @Valid @RequestBody AddressDTO addressDTO);

  /**
   * PUT /amenities/{id} : Edit amenities for specific apartment
   *
   * @param id Id of apartment (required)
   * @param amenityDTO (required)
   * @return Amenity successfully edited (status code 201) or Amenity not found (status code 404) or
   *     Invalid input (status code 405)
   */
  @ApiOperation(
      value = "Edit amenities for specific apartment",
      nickname = "editAmenity",
      notes = "",
      response = AmenityDTO.class,
      tags = {
        "amenity",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Amenity successfully edited",
            response = AmenityDTO.class),
        @ApiResponse(code = 404, message = "Amenity not found"),
        @ApiResponse(code = 405, message = "Invalid input")
      })
  @RequestMapping(
      value = "/amenities/{id}",
      produces = {"application/json"},
      consumes = {"application/json"},
      method = RequestMethod.PUT)
  ResponseEntity<AmenityDTO> editAmenity(
      @Min(0) @ApiParam(value = "Id of apartment", required = true) @PathVariable("id") Integer id,
      @ApiParam(value = "", required = true) @Valid @RequestBody AmenityDTO amenityDTO);
}
